kind: ConfigMap   # define a k8s object called ConfigMap
apiVersion: v1
metadata:
  name: mongodb-configmap  # the name of the config map = `mongodb-configmap`
data:
  db-username: devdb  # key value pair for `username`
  db-hostname: mongodb # key value pair for `hostname`
  db-password: devdb@123  #  key value pair for `password`
---
# echo -n devdb@123 | base64
apiVersion: v1
kind: Secret  # define a k8s object called Secret
metadata:
  name: mongodb-secret # the name of the secret  = `mongodb-secret`
stringData:
  db-password: ZGV2ZGJAMTIz  # the base64 encoded secret
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: springappdeployment
spec:
  replicas: 3
  selector:
    matchLabels:
      app: springapp
  template:
    metadata:
      name: springapppod
      labels:
        app: springapp
    spec:
      containers:
      - name: springappcontainer
        image: benadabankah/spring-boot-mongo
        ports:
        - containerPort: 8080
        env:
        - name: MONGO_DB_USERNAME
          valueFrom:
            configMapKeyRef:
              name: mongodb-configmap
              key: db-username
        - name: MONGO_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mongodb-secret
              key: db-password
        - name: MONGO_DB_HOSTNAME
          valueFrom:
            configMapKeyRef:
              name: mongodb-configmap
              key: db-hostname
        # startup probe: checks to see that the pod has started. Used during startup only. if the startup succeeds then other probes like the liveness and readiness probes can start
        startupProbe:
          httpGet:   #httpGet checks on port 8080 to determin if the pod has started
            path: /
            port: 8080
          failureThreshold: 30 # tells k8s to check 30 times before claring the startup failed
          periodSeconds: 10 # Tries every 10 seconds
        livenessProbe: # checks if the app is still alive after it has started
          httpGet:
            path: /
            port: 8080
          initialDelaySeconds: 30 # waits for 30 seconds after container starts before doing checks
          periodSeconds: 10   # runs every 10 seconds
          failureThreshold: 5 # if it fails for 3 times in a row, the pod is restarted
        readinessProbe: #readiness probe determines if the app is ready to receive traffic
         httpGet:
           path: /
           port: 8080
         initialDelaySeconds: 30 # wait 30 seconds after starting to begin checks
         periodSeconds: 10   # runs every 10 seconds
         failureThreshold: 5 # if it fails for 3 times in a row, the pod is NOT restarted


---
apiVersion: v1
kind: Service
metadata:
  name: springapp
spec:
  selector:
    app: springapp
  ports:
  - port: 80
    targetPort: 8080
  type: LoadBalancer

---
apiVersion: apps/v1
kind: ReplicaSet
metadata:
  name: mongodbrs
spec:
  selector:
    matchLabels:
      app: mongodb
  template:
     metadata:
       name: mongodbpod
       labels:
         app: mongodb
     spec:
       volumes:
         - name:  hostpath-vol
           hostPath:
             path:  /tmp/data
       containers:
       - name: mongodbcontainer
         image: mongo
         ports:
         - containerPort: 27017
         env:
         - name: MONGO_INITDB_ROOT_USERNAME
           valueFrom:
             configMapKeyRef:
               name: mongodb-configmap
               key: db-username
         - name: MONGO_INITDB_ROOT_PASSWORD
           valueFrom:
             secretKeyRef:
               name: mongodb-secret
               key: db-password
         volumeMounts:
         - name: hostpath-vol
           mountPath: /data/db
---
apiVersion: v1
kind: Service
metadata:
  name: mongodb
spec:
  type: ClusterIP
  selector:
    app: mongodb
  ports:
  - port: 27017
    targetPort: 27017
