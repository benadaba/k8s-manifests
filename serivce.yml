# example pod
apiVersion: v1
kind: Pod
metadata:
  name: dp-website-name
  labels:
    app: dp-website-label
spec:
  containers:
  - name: dp-website
    image: benadabankah/kofi_html_website:v1
    ports:
    - containerPort: 80

---
# Cluster IP  Service
#kams mnemonic
apiVersion: v1 #api version to use
kind: Service  #kubernetes object called services
metadata:  
  name: my-clusterip-service  #the name given to our service
spec:
  selector:    # this tells Service which pod(s) it should route traffic to . ( in this example it matches any pod, that has the label "app:nginx")
    app: nginx
  type: ClusterIP  # the type of service. this is the default service type. It is the most secure. it exposes the pods on the internal IP address ragnes
  ports:  
  - name: http
    port: 80
    targetPort: 80 # The port on the Pod (container port) that the Service will forward traffic
    protocol: TCP # specifies the protocol being used. 


---
# NodePort  Service
#kams mnemonic
apiVersion: v1 #api version to use
kind: Service  #kubernetes object called services
metadata:
  name: my-nodeport-service  #the name given to our service
spec:
  selector:    # this tells Service which pod(s) it should route traffic to . ( in this example it matches any pod, that has the label "app:nginx")
    app: dp-website-label
  type: NodePort  # the type of service. NodePort Exposes the service on each Node’s IP at a static port. A ClusterIP service, to which the NodePort service will route,  is automatically created. You’ll be able to contact the NodePort service, from outside the cluster, by using  “<NodeIP>:<NodePort>”.
  ports:
  - name: http
    port: 80
    targetPort: 80 # The port on the Pod (container port) that the Service will forward traffic
    protocol: TCP # specifies the protocol being used.
    nodePort: 30032

---
# Loadbalancer  Service
#kams mnemonic
apiVersion: v1 #api version to use
kind: Service  #kubernetes object called services
metadata:
  name: my-loadbalancer-svc-alb  #the name given to our service
spec:
  selector:    # this tells Service which pod(s) it should route traffic to . ( in this example it matches any pod, that has the label "app:nginx")
    app: dp-website-label
  type: LoadBalancer  # the type of service. Exposes the service externally using a cloud provider’s load balancer
  ports:
  - name: http
    port: 80
    targetPort: 80 # The port on the Pod (container port) that the Service will forward traffic
    protocol: TCP # specifies the protocol being used.

